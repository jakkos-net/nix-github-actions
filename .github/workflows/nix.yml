# Our desired pipeline using only a Nix shell environment
name: check test build release

on:
  workflow_dispatch:

jobs:
  check:
    name: check
    runs-on: ubuntu-22.04
    steps:
      - name: git checkout
        uses: actions/checkout@v3
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main
      - uses: DeterminateSystems/magic-nix-cache-action@main
      - name: Check Nixpkgs inputs
        uses: DeterminateSystems/flake-checker-action@main
        with:
          fail-mode: true

      # Nix-specific logic begins here
      - name: Check Rust formatting
        run: |
          nix develop --command \
            cargo fmt --check
      - name: Audit Rust code
        run: |
          nix develop --command \
            cargo-deny check

  test_build_release:
    name: test, build, release
    needs: check
    strategy:
      matrix:
        os: [ubuntu-22.04, macos-12]
    runs-on: ${{ matrix.os }}
    steps:
      - name: git checkout
        uses: actions/checkout@v3
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main
      - uses: DeterminateSystems/magic-nix-cache-action@main
      - name: Set up Rust cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: test-prog-${{ hashFiles('**/Cargo.lock') }}
      - name: cargo test
        run: |
          nix develop --command \
            cargo test
      - name: build 
        # nix build would also work here because `todos` is the default package
        run: nix build
      - uses: actions/upload-artifact@v3
        with:
          name: my-artifact
          path: result/bin/
      - name: release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: README.md
